# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bookstore
else:
    import _bookstore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class BookStore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _bookstore.BookStore_swiginit(self, _bookstore.new_BookStore(*args))
    __swig_destroy__ = _bookstore.delete_BookStore

    def initialize(self, force_reset=False):
        return _bookstore.BookStore_initialize(self, force_reset)

    def login(self, *args):
        return _bookstore.BookStore_login(self, *args)

    def logout(self):
        return _bookstore.BookStore_logout(self)

    def useradd(self, user_id, password, name, privilege):
        return _bookstore.BookStore_useradd(self, user_id, password, name, privilege)

    def customerUseradd(self, user_id, password, name):
        return _bookstore.BookStore_customerUseradd(self, user_id, password, name)

    def passwd(self, *args):
        return _bookstore.BookStore_passwd(self, *args)

    def deluser(self, user_id):
        return _bookstore.BookStore_deluser(self, user_id)

    def search(self, params):
        return _bookstore.BookStore_search(self, params)

    def select(self, ISBN):
        return _bookstore.BookStore_select(self, ISBN)

    def modify(self, new_book):
        return _bookstore.BookStore_modify(self, new_book)

    def import_(self, quantity, cost):
        return _bookstore.BookStore_import_(self, quantity, cost)

    def purchase(self, ISBN, quantity):
        return _bookstore.BookStore_purchase(self, ISBN, quantity)

    def showFinance(self, *args):
        return _bookstore.BookStore_showFinance(self, *args)

# Register BookStore in _bookstore:
_bookstore.BookStore_swigregister(BookStore)



